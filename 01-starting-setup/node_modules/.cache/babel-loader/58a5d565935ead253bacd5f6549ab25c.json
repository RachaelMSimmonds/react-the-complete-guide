{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RSimmonds\\\\Desktop\\\\JavaScriptPractice\\\\React_The_Complete_Guide\\\\01-starting-setup\\\\01-starting-setup\\\\src\\\\components\\\\NewExpense\\\\ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport './ExpenseForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpenseForm = () => {\n  _s();\n\n  // Way one - multiple states\n  const [enteredTitle, setEnteredTitle] = useState('');\n  const [enteredAmount, setEnteredAmount] = useState('');\n  const [enteredDate, setEnteredDate] = useState(''); // Way two - one state\n  // const [userInput, setUserInput] = useState({\n  //     enteredTitle: '',\n  //     enteredAmount: '',\n  //     enteredDate: ''\n  // });\n  // document.getElementById('').addEventListener('click', (event) => {})\n\n  const titleChangeHandler = event => {\n    // console.log('Title changed!')\n    // console.log(event.target.value)\n    setEnteredTitle(event.target.value); // setUserInput({\n    //     // enteredTitle: event.target.value,\n    //     ...userInput,\n    //     enteredTitle: event.target.value\n    // })\n    // Scheduled updates properly - if your state updates depend on previous update use this\n    // it will always be the latest state snapshot\n    // setUserInput((prevState) =>{\n    //     return {...prevState, enteredTitle: event.target.value}\n    // });\n  };\n\n  const amountChangeHandler = event => {\n    // console.log('Amount changed!')\n    // console.log(event.target.value)\n    setEnteredAmount(event.target.value); // enteredAmount: event.target.value,\n    // setUserInput({\n    //     ...userInput,\n    //     enteredAmount: event.target.value\n    // })\n    // Scheduled updates properly - if your state updates depend on previous update use this\n    // it will always be the latest state snapshot\n    // setUserInput((prevState) =>{\n    //     return {...prevState, enteredAmount: event.target.value}\n    // });\n  };\n\n  const dateChangeHandler = event => {\n    // console.log('Date changed!')\n    // console.log(event.target.value)\n    setEnteredDate(event.target.value); // enteredDate: event.target.value,\n    // setUserInput({\n    //     ...userInput,\n    //     enteredDate: event.target.value\n    // })\n    // Scheduled updates properly - if your state updates depend on previous update use this\n    // it will always be the latest state snapshot\n    // setUserInput((prevState) =>{\n    //     return {...prevState, enteredDate: event.target.value}\n    // });\n  };\n\n  const submitHandler = () => {};\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2023-01-01\",\n          max: \"2026-12-31\",\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ExpenseForm, \"/TSOglz5ZV3C6oWQkp/FZ+OWqo4=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["React","useState","ExpenseForm","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","titleChangeHandler","event","target","value","amountChangeHandler","dateChangeHandler","submitHandler"],"sources":["C:/Users/RSimmonds/Desktop/JavaScriptPractice/React_The_Complete_Guide/01-starting-setup/01-starting-setup/src/components/NewExpense/ExpenseForm.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport './ExpenseForm.css'\r\n\r\nconst ExpenseForm = () => {\r\n    // Way one - multiple states\r\n    const [enteredTitle, setEnteredTitle] = useState('');\r\n    const [enteredAmount, setEnteredAmount] = useState('');\r\n    const [enteredDate, setEnteredDate] = useState('')\r\n\r\n    // Way two - one state\r\n    // const [userInput, setUserInput] = useState({\r\n    //     enteredTitle: '',\r\n    //     enteredAmount: '',\r\n    //     enteredDate: ''\r\n    // });\r\n\r\n    // document.getElementById('').addEventListener('click', (event) => {})\r\n    const titleChangeHandler = (event) => {\r\n        // console.log('Title changed!')\r\n        // console.log(event.target.value)\r\n\r\n        setEnteredTitle(event.target.value)\r\n\r\n        // setUserInput({\r\n        //     // enteredTitle: event.target.value,\r\n        //     ...userInput,\r\n        //     enteredTitle: event.target.value\r\n        // })\r\n\r\n        // Scheduled updates properly - if your state updates depend on previous update use this\r\n        // it will always be the latest state snapshot\r\n        // setUserInput((prevState) =>{\r\n        //     return {...prevState, enteredTitle: event.target.value}\r\n        // });\r\n    }\r\n\r\n    const amountChangeHandler = (event) => {\r\n        // console.log('Amount changed!')\r\n        // console.log(event.target.value)\r\n\r\n        setEnteredAmount(event.target.value)\r\n\r\n        // enteredAmount: event.target.value,\r\n        // setUserInput({\r\n        //     ...userInput,\r\n        //     enteredAmount: event.target.value\r\n        // })\r\n\r\n        // Scheduled updates properly - if your state updates depend on previous update use this\r\n        // it will always be the latest state snapshot\r\n        // setUserInput((prevState) =>{\r\n        //     return {...prevState, enteredAmount: event.target.value}\r\n        // });\r\n    }\r\n\r\n    const dateChangeHandler = (event) => {\r\n        // console.log('Date changed!')\r\n        // console.log(event.target.value)\r\n\r\n        setEnteredDate(event.target.value)\r\n\r\n        // enteredDate: event.target.value,\r\n        // setUserInput({\r\n        //     ...userInput,\r\n        //     enteredDate: event.target.value\r\n        // })\r\n\r\n        // Scheduled updates properly - if your state updates depend on previous update use this\r\n        // it will always be the latest state snapshot\r\n        // setUserInput((prevState) =>{\r\n        //     return {...prevState, enteredDate: event.target.value}\r\n        // });\r\n    }\r\n\r\n    const submitHandler = () => {}\r\n\r\n    return (\r\n        <form onSubmit={submitHandler}>\r\n            <div className=\"new-expense__controls\">\r\n                <div className=\"new-expense__control\">\r\n                    <label>Title</label>\r\n                    <input type='text' onChange={titleChangeHandler}/>\r\n                </div>\r\n                <div className=\"new-expense__control\">\r\n                    <label>Amount</label>\r\n                    <input type='number' min=\"0.01\" step=\"0.01\" onChange={amountChangeHandler}/>\r\n                </div>\r\n                <div className=\"new-expense__control\">\r\n                    <label>Date</label>\r\n                    <input type='date' min=\"2023-01-01\" max=\"2026-12-31\" onChange={dateChangeHandler}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"new-expense__actions\">\r\n                <button type=\"submit\">Add Expense</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default ExpenseForm;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAO,mBAAP;;;AAEA,MAAMC,WAAW,GAAG,MAAM;EAAA;;EACtB;EACA,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCH,QAAQ,CAAC,EAAD,CAAhD;EACA,MAAM,CAACI,aAAD,EAAgBC,gBAAhB,IAAoCL,QAAQ,CAAC,EAAD,CAAlD;EACA,MAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,EAAD,CAA9C,CAJsB,CAMtB;EACA;EACA;EACA;EACA;EACA;EAEA;;EACA,MAAMQ,kBAAkB,GAAIC,KAAD,IAAW;IAClC;IACA;IAEAN,eAAe,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf,CAJkC,CAMlC;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;EACH,CAjBD;;EAmBA,MAAMC,mBAAmB,GAAIH,KAAD,IAAW;IACnC;IACA;IAEAJ,gBAAgB,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAhB,CAJmC,CAMnC;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;EACH,CAjBD;;EAmBA,MAAME,iBAAiB,GAAIJ,KAAD,IAAW;IACjC;IACA;IAEAF,cAAc,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd,CAJiC,CAMjC;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;EACH,CAjBD;;EAmBA,MAAMG,aAAa,GAAG,MAAM,CAAE,CAA9B;;EAEA,oBACI;IAAM,QAAQ,EAAEA,aAAhB;IAAA,wBACI;MAAK,SAAS,EAAC,uBAAf;MAAA,wBACI;QAAK,SAAS,EAAC,sBAAf;QAAA,wBACI;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI;UAAO,IAAI,EAAC,MAAZ;UAAmB,QAAQ,EAAEN;QAA7B;UAAA;UAAA;UAAA;QAAA,QAFJ;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eAKI;QAAK,SAAS,EAAC,sBAAf;QAAA,wBACI;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI;UAAO,IAAI,EAAC,QAAZ;UAAqB,GAAG,EAAC,MAAzB;UAAgC,IAAI,EAAC,MAArC;UAA4C,QAAQ,EAAEI;QAAtD;UAAA;UAAA;UAAA;QAAA,QAFJ;MAAA;QAAA;QAAA;QAAA;MAAA,QALJ,eASI;QAAK,SAAS,EAAC,sBAAf;QAAA,wBACI;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI;UAAO,IAAI,EAAC,MAAZ;UAAmB,GAAG,EAAC,YAAvB;UAAoC,GAAG,EAAC,YAAxC;UAAqD,QAAQ,EAAEC;QAA/D;UAAA;UAAA;UAAA;QAAA,QAFJ;MAAA;QAAA;QAAA;QAAA;MAAA,QATJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAeI;MAAK,SAAS,EAAC,sBAAf;MAAA,uBACI;QAAQ,IAAI,EAAC,QAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QAfJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAqBH,CA9FD;;GAAMZ,W;;KAAAA,W;AAgGN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}